// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: bgp.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BgpApiClient is the client API for BgpApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BgpApiClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetLogPath(ctx context.Context, in *GetLogPathRequest, opts ...grpc.CallOption) (*GetLogPathResponse, error)
	Show(ctx context.Context, in *BgpShowRequest, opts ...grpc.CallOption) (*BgpShowResponse, error)
	GetNeighbor(ctx context.Context, in *GetNeighborRequest, opts ...grpc.CallOption) (*GetNeighborResponse, error)
	ListNeighbor(ctx context.Context, in *ListNeighborRequest, opts ...grpc.CallOption) (*ListNeighborResponse, error)
	SetAS(ctx context.Context, in *SetASRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RouterId(ctx context.Context, in *RouterIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoteAS(ctx context.Context, in *RemoteASRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Network(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type bgpApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBgpApiClient(cc grpc.ClientConnInterface) BgpApiClient {
	return &bgpApiClient{cc}
}

func (c *bgpApiClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grp.BgpApi/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpApiClient) GetLogPath(ctx context.Context, in *GetLogPathRequest, opts ...grpc.CallOption) (*GetLogPathResponse, error) {
	out := new(GetLogPathResponse)
	err := c.cc.Invoke(ctx, "/grp.BgpApi/GetLogPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpApiClient) Show(ctx context.Context, in *BgpShowRequest, opts ...grpc.CallOption) (*BgpShowResponse, error) {
	out := new(BgpShowResponse)
	err := c.cc.Invoke(ctx, "/grp.BgpApi/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpApiClient) GetNeighbor(ctx context.Context, in *GetNeighborRequest, opts ...grpc.CallOption) (*GetNeighborResponse, error) {
	out := new(GetNeighborResponse)
	err := c.cc.Invoke(ctx, "/grp.BgpApi/GetNeighbor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpApiClient) ListNeighbor(ctx context.Context, in *ListNeighborRequest, opts ...grpc.CallOption) (*ListNeighborResponse, error) {
	out := new(ListNeighborResponse)
	err := c.cc.Invoke(ctx, "/grp.BgpApi/ListNeighbor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpApiClient) SetAS(ctx context.Context, in *SetASRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grp.BgpApi/SetAS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpApiClient) RouterId(ctx context.Context, in *RouterIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grp.BgpApi/RouterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpApiClient) RemoteAS(ctx context.Context, in *RemoteASRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grp.BgpApi/RemoteAS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpApiClient) Network(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grp.BgpApi/Network", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BgpApiServer is the server API for BgpApi service.
// All implementations must embed UnimplementedBgpApiServer
// for forward compatibility
type BgpApiServer interface {
	Health(context.Context, *HealthRequest) (*empty.Empty, error)
	GetLogPath(context.Context, *GetLogPathRequest) (*GetLogPathResponse, error)
	Show(context.Context, *BgpShowRequest) (*BgpShowResponse, error)
	GetNeighbor(context.Context, *GetNeighborRequest) (*GetNeighborResponse, error)
	ListNeighbor(context.Context, *ListNeighborRequest) (*ListNeighborResponse, error)
	SetAS(context.Context, *SetASRequest) (*empty.Empty, error)
	RouterId(context.Context, *RouterIdRequest) (*empty.Empty, error)
	RemoteAS(context.Context, *RemoteASRequest) (*empty.Empty, error)
	Network(context.Context, *NetworkRequest) (*empty.Empty, error)
	mustEmbedUnimplementedBgpApiServer()
}

// UnimplementedBgpApiServer must be embedded to have forward compatible implementations.
type UnimplementedBgpApiServer struct {
}

func (UnimplementedBgpApiServer) Health(context.Context, *HealthRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedBgpApiServer) GetLogPath(context.Context, *GetLogPathRequest) (*GetLogPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogPath not implemented")
}
func (UnimplementedBgpApiServer) Show(context.Context, *BgpShowRequest) (*BgpShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedBgpApiServer) GetNeighbor(context.Context, *GetNeighborRequest) (*GetNeighborResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeighbor not implemented")
}
func (UnimplementedBgpApiServer) ListNeighbor(context.Context, *ListNeighborRequest) (*ListNeighborResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNeighbor not implemented")
}
func (UnimplementedBgpApiServer) SetAS(context.Context, *SetASRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAS not implemented")
}
func (UnimplementedBgpApiServer) RouterId(context.Context, *RouterIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouterId not implemented")
}
func (UnimplementedBgpApiServer) RemoteAS(context.Context, *RemoteASRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteAS not implemented")
}
func (UnimplementedBgpApiServer) Network(context.Context, *NetworkRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Network not implemented")
}
func (UnimplementedBgpApiServer) mustEmbedUnimplementedBgpApiServer() {}

// UnsafeBgpApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BgpApiServer will
// result in compilation errors.
type UnsafeBgpApiServer interface {
	mustEmbedUnimplementedBgpApiServer()
}

func RegisterBgpApiServer(s grpc.ServiceRegistrar, srv BgpApiServer) {
	s.RegisterService(&BgpApi_ServiceDesc, srv)
}

func _BgpApi_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpApiServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.BgpApi/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpApiServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpApi_GetLogPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpApiServer).GetLogPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.BgpApi/GetLogPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpApiServer).GetLogPath(ctx, req.(*GetLogPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpApi_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpApiServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.BgpApi/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpApiServer).Show(ctx, req.(*BgpShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpApi_GetNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpApiServer).GetNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.BgpApi/GetNeighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpApiServer).GetNeighbor(ctx, req.(*GetNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpApi_ListNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpApiServer).ListNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.BgpApi/ListNeighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpApiServer).ListNeighbor(ctx, req.(*ListNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpApi_SetAS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetASRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpApiServer).SetAS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.BgpApi/SetAS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpApiServer).SetAS(ctx, req.(*SetASRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpApi_RouterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpApiServer).RouterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.BgpApi/RouterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpApiServer).RouterId(ctx, req.(*RouterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpApi_RemoteAS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteASRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpApiServer).RemoteAS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.BgpApi/RemoteAS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpApiServer).RemoteAS(ctx, req.(*RemoteASRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpApi_Network_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpApiServer).Network(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.BgpApi/Network",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpApiServer).Network(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BgpApi_ServiceDesc is the grpc.ServiceDesc for BgpApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BgpApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grp.BgpApi",
	HandlerType: (*BgpApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _BgpApi_Health_Handler,
		},
		{
			MethodName: "GetLogPath",
			Handler:    _BgpApi_GetLogPath_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _BgpApi_Show_Handler,
		},
		{
			MethodName: "GetNeighbor",
			Handler:    _BgpApi_GetNeighbor_Handler,
		},
		{
			MethodName: "ListNeighbor",
			Handler:    _BgpApi_ListNeighbor_Handler,
		},
		{
			MethodName: "SetAS",
			Handler:    _BgpApi_SetAS_Handler,
		},
		{
			MethodName: "RouterId",
			Handler:    _BgpApi_RouterId_Handler,
		},
		{
			MethodName: "RemoteAS",
			Handler:    _BgpApi_RemoteAS_Handler,
		},
		{
			MethodName: "Network",
			Handler:    _BgpApi_Network_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bgp.proto",
}
